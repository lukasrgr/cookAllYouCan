var jssModule = require("../external/jss")
var proto = require('proto')
var HashMap = require('hashmap')

var utils = require("./utils")

var baseClassName = '_ComponentStyle_' // the base name for generated class names
var nextClassNumber = 0


var mixedStyles = new HashMap() // maps from a pair of Style objects to the resulting mixed style

// creates a style object
var Style = module.exports = proto(function() {

    // static properties

    // transforms the output of Style.toString() back into a Style object
    this.fromString = function(styleString, context) {
        if(context === undefined) context = {}
        var obj = JSON.parse(styleString)

        var transformFunctionStringsToFunctions = function(obj) {
            for(var p in obj) {
                var x = obj[p]
                if(x instanceof Object) {
                    transformFunctionStringsToFunctions(x)
                } else if(typeof(x) === 'string' && x.substr(0,8) === 'function') {
                    if(context.Style === undefined) {
                        context.Style = Style
                    }

                    var keys=[], values=[]
                    for(var key in context) {
                        keys.push(key)
                        values.push(context[key])
                    }

                    obj[p] = Function(keys, 'return '+x).apply(undefined, values)
                }
            }
        }

        transformFunctionStringsToFunctions(obj)

        return Style(obj)
    }

    // instance properties

    this.defaultClassName = '_default_'     // the name of the default class (used to prevent style inheritance)

    // styleDefinition is an object where key-value pairs can be any of the following:
    // <cssPropertyName>: the value should be a valid css value for that style attribute
    // <ComponentName>: the value can either be a Style object or a nested styleDefinition object
    // $setup: the value is a function to be run on a component when the style is applied to it
    // $kill: the value is a function to be run on a component when a style is removed from it
    // $state: the value should be a state handler function
    // $<label>: the value should be a nested styleDefinition object that does not contain any label styles.
    // $inherit: this style should inherit from whatever style would otherwise have been in its placed if it was undefined
    this.init = function(styleDefinition, privateOptions) {
        if(isStyleObject(styleDefinition))
            return styleDefinition
        // else

        if(privateOptions === undefined) privateOptions = {}

        this.className = baseClassName+nextClassNumber
        nextClassNumber++

        this.componentStyleMap = {}
        this.nativeCssInfoCache = new HashMap
//        this.pureStyleInteractionCache = new HashMap
        this.nativePseudoclassesWritten = {}
        this.basicProperties = {}
        if(Style.isDev()) this.nativePseudoclassStyles = {}

        var flatPseudoClassStyles = new HashMap
        for(var key in styleDefinition) {
            var value = styleDefinition[key]

            if(key === '$setup') {
                if(!(value instanceof Function)) throw new Error("$setup key must be a function ('setup' can't be used as a label)")
                this.setup = value

            } else if(key === '$kill') {
                if(!(value instanceof Function)) throw new Error("$kill key must be a function ('kill' can't be used as a label)")
                this.kill = value

            } else if(key === '$state') {
                if(!(value instanceof Function)) throw new Error("$state key must be a function ('$state' can't be used as a label)")
                this.stateHandler = value

            } else if(key === '$inherit') {
                this.inherit = true

            } else if(key.indexOf('$$') === 0) { // pseudo-class style
                var parts = getPseudoClassParts(key.substr(2))
                var pseudoClass = mapCamelCase(parts.class)
                if(parts.parameter !== undefined) {
                    pseudoClass+='('+parts.parameter+")"
                }

                if(pseudoClass === '') {
                    throw new Error("Empty pseudo-class name not valid (style key '$$')")
                }

                var flattenedPseudoclassObject = flattenPseudoClassStyles([pseudoClass], Style(value))

                // mix in the resulting compound pseudoclass styles with what has already been found
                flattenedPseudoclassObject.forEach(function(style, key) {
                    styleHashmapMerge(flatPseudoClassStyles, key, style)
                })

            } else if(key === '$') {
                throw new Error("Empty label name not valid (style key '$')")
            } else if(value instanceof Object || isStyleObject(value)) {  // $label or Gem style
                this.componentStyleMap[key] = Style(value)  // turn the object description into a full fledged style object (or pass back the object if its already a Style)
            } else if(value === undefined) {
                // ignore
            } else {
                var cssStyle = key
                var cssStyleName = mapCamelCase(cssStyle)
                this.basicProperties[cssStyleName] = cssValue(cssStyleName, value)
            }
        }

        this.pseudoclasses = processFlattenedPseudoclasses(flatPseudoClassStyles, this.componentStyleMap)
        this.pureNative = isPureNative(this)


        // takes in a list of pseudoClassRules and changes any nesting like {$$hover: {$$focus: {}}} into something like {hover: {}, ['hover','focus']: {}}
        // returns a new HashMap where
            // each key is the list of pseudoclasses that need to apply for that style to take effect, and
            // each value is a Style object
        // also does some validation
        // pseudoClasses - an array of pseudoclasses
        // pseudoClassStyle - a Style object representing the style inside the pseudoclass
        function flattenPseudoClassStyles(pseudoClasses, pseudoClassStyle) {

            if(pseudoClassStyle.stateHandler !== undefined) {
                throw new Error('$state style functions are not valid directly inside psuedoclasses')
            }

            var flattenedStyles = new HashMap
            var pseudoClassStyleCopy = pseudoClassStyle.copy() // copy so you're not clobbering a style something else relies on

            var pseudoclasses = pseudoClassStyleCopy.pseudoclasses

            // remove the pseudoclasses
            pseudoClassStyleCopy.pseudoclasses = {classes:new HashMap,emulatedInfo:{}}//{native:new HashMap,emulated:new HashMap,emulatedInfo:{}, emulatedOrder:[]}

            // write the top-level pseudoClass
            flattenedStyles.set(pseudoClasses, pseudoClassStyleCopy)

            // create flattened styles (with merged in styles from its parent pseudoclass

            pseudoclasses.classes.forEach(function(substyle, subPseudoClass){
                var newCompoundSelector = canonicalizeCompoundPseudoclass(pseudoClasses.concat(subPseudoClass))
                var mixedStyle = pseudoClassStyleCopy.mix(substyle, false)
                flattenedStyles.set(newCompoundSelector, mixedStyle)
            })

            return flattenedStyles
        }

        // pseudoclassList - the list of pseudoclasses that make up the key
        // mutates pseudoclassList into a canonicalized list
        function canonicalizeCompoundPseudoclass(pseudoclassList) {
            pseudoclassList.sort()  // some string sort to canonicalize the list of pseudoclasses (not really important how it sorts exactly, just that its consistent)

            // remove duplicates
            var lastKey = pseudoclassList[0]
            for(var n=1; n<pseudoclassList.length;) {
                if(pseudoclassList[n] === lastKey) {
                    pseudoclassList.splice(n,1)
                } else {
                    n++
                }
            }

            return pseudoclassList
        }


        // merges two hashmaps together, where if the same key is set in both hashmaps, the values (being Style objects) are mixed together (styles in b overriding)
        // mutates map
        function styleHashmapMerge(map, newKey, newStyle) {
            if(map.has(newKey)) {
                var valueToSet = map.get(newKey).mix(newStyle, false)
            } else {
                var valueToSet = newStyle
            }

            map.set(newKey, valueToSet)
        }

        // returns an object containing the following properties
            // classes - a hashmap object
                // each key is a canonicalized array of pseudoclasses for only emulatable pseudoclasses, and
                // each value is a Style object
            // emulatedInfo - an object where
                // each key is an individual psuedoclass selector (like the elements in a canonicalized pseudoclass list), and
                // each value is an object containing the properties:
                    // fns - the emulated psuedoclass functions `check`, `setup`, and `kill`
                    // parameter - the psuedoclass parameter to pass into `check` and `setup`
        // compoundPseudoClassStyles - a hashmap where
            // each key is a canonicalized array of pseudoclasses, and
            // each value is a Style object
        function processFlattenedPseudoclasses(compoundPseudoClassStyles, componentStyleMap) {

            var pseudoclasses = new HashMap
            compoundPseudoClassStyles.forEach(function(pseudoclassStyle, key) {
                if(pseudoclassStyle.pureNative) {
                    // make sure the pseudoclasses are all natively renderable (any js-rendered pseudoclass that isn't marked 'emulated' is not natively emulatable)
                    var allEmulated = true
                    for(var n=0; n<key.length; n++) {
                        var parts = getPseudoClassParts(key[n])
                        var psuedoclassInfo = jsRenderedPseduoclasses[parts.class]
                        if(psuedoclassInfo !== undefined && !psuedoclassInfo.emulated) {
                            allEmulated = false
                            break
                        }
                    }

                    var componentStyleMapConflicts = false
                    if(allEmulated) {
                        componentStyleMapConflicts = styleMapConflicts(componentStyleMap, pseudoclassStyle.componentStyleMap)
                    }

                    pseudoclassStyle.pureNative = allEmulated && !componentStyleMapConflicts
                }

                for(var n=0; n<key.length; n++) {
                    var parts = getPseudoClassParts(key[n])
                    var psuedoclassInfo = jsRenderedPseduoclasses[parts.class]
                    if(psuedoclassInfo !== undefined && psuedoclassInfo.parameterTransform !== undefined) {
                        var transformedParameter = psuedoclassInfo.parameterTransform(parts.parameter)
                        key[n] = parts.class+"("+transformedParameter+")"
                    }
                }

                pseudoclasses.set(key, pseudoclassStyle)
            })

            var emulatedInfo={}
            pseudoclasses.forEach(function(pseudoclassStyle,individualPseudoclasses) {
                if(!pseudoclassStyle.pureNative) {
                    individualPseudoclasses.forEach(function(pseudoclass) {
                        if(!(pseudoclass in emulatedInfo)) {
                            emulatedInfo[pseudoclass] = getEmulatedInfo(pseudoclass)
                        }
                    })
                }
            })

            return {classes: pseudoclasses, emulatedInfo:emulatedInfo}
        }
    }

    // returns true if there are any styleMap conflicts, which is when any inner style of pseudoclassStyleMap collides with a non-pure style in mainStyleMap
    function styleMapConflicts(mainStyleMap, pseudoclassStyleMap) {
        for(var blockSelector in mainStyleMap) {
            if(blockSelector in pseudoclassStyleMap) {
                if(!mainStyleMap[blockSelector].pureNative) {
                    return true
                } else {
                    var pseudoclassInnerStyle = pseudoclassStyleMap[blockSelector]
                    if(styleMapConflicts(mainStyleMap, pseudoclassInnerStyle.componentStyleMap)) {
                        return true
                    }

                    var pseudoclassStyles = pseudoclassInnerStyle.pseudoclasses.classes.values()
                    for(var n=0; n<pseudoclassStyles.length; n++) {
                        var pseudoclassStyle = pseudoclassStyles[n]
                        if(styleMapConflicts(mainStyleMap, pseudoclassStyle.componentStyleMap)) {
                            return true
                        }
                    }
                }
            }
        }

        return false
    }


    // returns true if there are any styleMap conflicts, which is when any inner style of pseudoclassStyleMap collides with a non-pure style in mainStyleMap
    function styleMapConflicts(mainStyleMap, pseudoclassStyleMap) {
        for(var blockSelector in pseudoclassStyleMap) {
            if(blockSelector in mainStyleMap) {
                if(!mainStyleMap[blockSelector].pureNative) {
                    return true
                }
            }

            var pseudoclassInnerStyle = pseudoclassStyleMap[blockSelector]
            if(styleMapConflicts(mainStyleMap, pseudoclassInnerStyle.componentStyleMap)) {
                return true
            }

            var pseudoclassStyles = pseudoclassInnerStyle.pseudoclasses.classes.values()
            for(var n=0; n<pseudoclassStyles.length; n++) {
                var pseudoclassStyle = pseudoclassStyles[n]
                if(styleMapConflicts(mainStyleMap, pseudoclassStyle.componentStyleMap)) {
                    return true
                }
            }
        }

        return false
    }

    // returns either
        // this style if styleB is undefined, or
        // a new Style object that merges styleB's properties into the current one such that styleB's properties override the current Style's properties
    // mixInherit - (default: true) if false, doesn't mix in the 'inherit' property
    this.mix = function(styleB, mixInherit) {
        if(mixInherit === undefined) mixInherit = true
        if(styleB === undefined || styleB === this)
            return this
        if(!isStyleObject(styleB)) styleB = Style(styleB)

        var cacheKey = [this,styleB,mixInherit]
        var mixedStyle = mixedStyles.get(cacheKey)
        if(mixedStyle === undefined) {     // note: mixedStyle can only be undefined if the two style have never been mixed before
            var mixedStyle = mixWithoutCreatingNativePseudoclasses(this, styleB, mixInherit)
            mixedStyles.set(cacheKey, mixedStyle)
        }

        return mixedStyle
    }

    // returns a copy of the style with a new className
    this.copy = function () {
        return mixWithoutCreatingNativePseudoclasses(this, Style(), true)
    }

    // returns an object with the members
        // fns - the functions for the given pseudoclass
        // parameter - the processed parameter to pass into fns.setup
    // pseudoclass - a pseudoclass selector (eg "not(:required)")
    function getEmulatedInfo(pseudoclass) {
        var parts = getPseudoClassParts(pseudoclass)
        var fns = jsRenderedPseduoclasses[parts.class]

        if(fns ===  undefined) {
            throw new Error("Pseudoclass "+parts.class+" isn't emulated, but has a style that can't be rendered in pure css")
        }

        var info = {fns: fns}
        if(parts.parameter !== undefined) {
            if(fns.processParameter !== undefined) {
                info.parameter = fns.processParameter(parts.parameter)
            } else {
                info.parameter = parts.parameter
            }
        }

        return info
    }

    // returns an object
        // either with the properties:
            // style - style that has native css properties (basic and pseudoclass) set for it and its block's computedStyleMap
                // this return value *can* be this style itself if there are no interactions with the passed styleMap
            // styleMap - a potentially new styleMap that has copied or inserted styles needed for native psuedoclass rendering
            // nativePsuedoclassMap - a new pseudoclassMap to set on the block
        // OR with the proeprties:
            // cancel:true - exists if a pure native psuedoclass style can't be rendered native because of a collision with a computedStyleMap style that isn't pure native
            // style - the new style to get the pseudoclass style from (and then set with setPreStyleMapStyle)
    // styleMap - a map of style selectors (Gem names or labels) to Styles who's classNames will be used to create the native css
        // intended to be a style map that comes from a block's computedStyleMap property
        // the computedStyleMap can affect how sub-pseudoclass selectors are written
    // nativePseudoclassSelectorMap - an object where each key is a base css-selector, and each value is a Style object
    // jsRenderedPseudoclassIndex - if this style is a js-redered/emulated psueodclass, this is its index inside its parent style's pseudoclasses.classes map, otherwise the value will be 0
    this.createNativeCssInfo = function(gem, styleMap, nativePseudoclassSelectorMap, jsRenderedPseudoclassIndex, defaultStyle) {
        if(this.inherit) {
            var parentCacheKey = gem.parent
        }
        var cacheKey = [parentCacheKey, styleMap, nativePseudoclassSelectorMap, jsRenderedPseudoclassIndex, defaultStyle]
        var cacheHasStyleMap = this.nativeCssInfoCache.has(cacheKey)
        if(cacheHasStyleMap) {
            return this.nativeCssInfoCache.get(cacheKey)
        }
        // else
        var styleToReturn = this // can change below if there is an interaction with the styleMap
        if(this.pureNative && this.pseudoclasses.classes.keys().length !== 0) { // only care about pseudoclass interactions if it has pseudoclasses
            var styleSelectors = containedStyleSelectors(this)
            var info = stylesInfo(styleSelectors, styleMap)
            var interacts = info.impure.length > 0
            if(!interacts) {
//                var pureStyleInteractionCacheItem = this.pureStyleInteractionCache.get(info.undef)
//                if(pureStyleInteractionCacheItem === undefined) {
                    var evenNewerComputedStyleMap = utils.merge({},styleMap) // copy
                    for(var key in evenNewerComputedStyleMap) {
                        if(key in styleSelectors) {
                            evenNewerComputedStyleMap[key] = evenNewerComputedStyleMap[key].copy() // copy to ensure that a unique className is created (so that native pseudoclasses don't have the possibility of merging weirdly)
                        }
                    }
                    for(var n=0; n<info.undef.length; n++) {
                        evenNewerComputedStyleMap[info.undef[n]] = Style()  // empty style who's className will be used to create native pseudoclass styles
                    }

                    styleToReturn = this.copy()    // a new style className is needed to avoid potential incorrect css overlap
                    styleMap = evenNewerComputedStyleMap
//                    this.pureStyleInteractionCache.set(info.undef, {style:styleToReturn, map: styleMap})
//                } else {
//                    styleToReturn = pureStyleInteractionCacheItem.style
//                    styleMap = pureStyleInteractionCacheItem.map
//                }
            } else {
                var retryStyle = this.copy()
                changeStyleToNonNative(retryStyle)

                var result = {cancel: true, retryStyle: retryStyle}
                setNativeCssInfoCache(this.nativeCssInfoCache, result)
                return result
            }
        }

        if(!styleToReturn.basicNativeCssRendered) {
            setCss('.'+styleToReturn.className, styleToReturn.basicProperties)
            styleToReturn.basicNativeCssRendered = true
        }

        var newNativePseudoclassMap = createNativePseudoclasses(gem, styleToReturn, nativePseudoclassSelectorMap, jsRenderedPseudoclassIndex, defaultStyle)

        var result = {style: styleToReturn, styleMap: styleMap, nativePseudoclassMap: newNativePseudoclassMap}
        setNativeCssInfoCache(this.nativeCssInfoCache, result)
        return result


        // mutates the passed style so that its not native
        function changeStyleToNonNative(style) {
            style.pureNative = false
            var newClasses = new HashMap
            style.pseudoclasses.classes.forEach(function(pseudoclassStyle, individualPseudoclasses) {
                //if(style.pureNative) { // all of these will be pureNative, or style wouldn't be
                    var copy = pseudoclassStyle.copy()
                    copy.pureNative = false
                    newClasses.set(individualPseudoclasses, copy)

                    individualPseudoclasses.forEach(function(pseudoclass) {
                        if(!(pseudoclass in pseudoclassStyle.pseudoclasses.emulatedInfo)) {
                            style.pseudoclasses.emulatedInfo[pseudoclass] = getEmulatedInfo(pseudoclass)
                        }
                    })

                /*} else {
                    newClasses.set(individualPseudoclasses, style)
                }*/
            })

            style.pseudoclasses.classes = newClasses

            return style
        }

        function setNativeCssInfoCache(nativeCssInfoCache, value) {
            nativeCssInfoCache.set(cacheKey, value)
        }

        // returns the label and block selectors within the style (recursive)
        // the grabs from both componentStyleMap and psuedoclasses.native[x].componentStyleMap
        function containedStyleSelectors(style) {
            var result = {}
            for(var key in style.componentStyleMap) {
                var innerStyle = style.componentStyleMap[key]
                mergeInSelectors(key, innerStyle)
            }

            style.pseudoclasses.classes.forEach(function(pseudoclassStyle) {
                if(pseudoclassStyle.pureNative) {
                    for(var key in pseudoclassStyle.componentStyleMap) {
                        var innerStyle = pseudoclassStyle.componentStyleMap[key]
                        mergeInSelectors(key, innerStyle)
                    }
                }
            })

            return result


            function mergeInSelectors(key, innerStyle) {
                result[key] = true

                var selectors = containedStyleSelectors(innerStyle)
                utils.merge(result, selectors)
            }
        }

        // returns info about what styles in styleSelectors and in newComputedStyleMap are:
            // impure in newComputedStyleMap
            // not defined in newComputedStyleMap
        function stylesInfo(styleSelectors, newComputedStyleMap) {
            var impure = []
            var undef = []
            for(var key in styleSelectors) {
                var style = newComputedStyleMap[key]
                if(style === undefined) {
                    undef.push(key)
                } else if(!style.pureNative) {
                    impure.push(key)
                }
            }
            return {impure:impure,undef:undef}
        }
    }

    this.toObject = function() {
        var object = {}
        for(var property in this.basicProperties) {
            object[property] = this.basicProperties[property]
        }

        if(this.inherit)
            object.$inherit = true

        for(var selector in this.componentStyleMap) {
            object[selector] = this.componentStyleMap[selector].toObject()
        }

        var addPseudoclass = function(pseudoclassList, style) {
            var curObject = object, lastObject, lastPseudoclass
            pseudoclassList.forEach(function(pseudoclass) {
                var curPseudoclass = '$$'+pseudoclass
                if(curObject[curPseudoclass] === undefined) {
                    curObject[curPseudoclass] = {}
                }

                lastPseudoclass = curPseudoclass
                lastObject = curObject
                curObject = curObject[lastPseudoclass]
            })

            var newProperties = style.toObject()
            for(var key in newProperties) {
                lastObject[lastPseudoclass][key] = newProperties[key] // merge
            }

        }

        if(this.pseudoclasses.classes !== undefined) {
            this.pseudoclasses.classes.forEach(function(style, pseudoclassList) {
                addPseudoclass(pseudoclassList, style)
            })
        }

        if(this.stateHandler !== undefined) {
            object.$state = this.stateHandler
        }
        if(this.setup !== undefined) {
            object.$setup = this.setup
        }
        if(this.kill !== undefined) {
            object.$kill = this.kill
        }

        return object
    }

    // converts the style into a JSON string
    // note that $state, $setup, and $kill functions are also stored as strings
    this.toString = function() {
        var obj = this.toObject()

        var transformFunctionsToStrings = function(obj) {
            for(var p in obj) {
                var x = obj[p]
                if(x instanceof Function) {
                    obj[p] = x.toString()
                } else if(x instanceof Object) {
                    transformFunctionsToStrings(x)
                }
            }
        }

        transformFunctionsToStrings(obj)

        return JSON.stringify(obj)
    }

    // instance properties

    this.className          // the css classname for this style
    this.componentStyleMap; // maps a Component name to a Style object for that component
    this.setup;             // run some javascript on any element this class is applied to
    this.kill;              // a function to run on removal of the style (should reverse setup)


    // private properties

    this.nativeCssInfoCache; // instance property that stores a map between a styleMap and a potentially modified pair: {style:<Style object>, styleMap: <computedStyleMap>}
    this.basicNativeCssRendered; // contains true if the css class has been written to a stylesheet


    // creates a new style with styleB mixed into styleA (styleB overrides)
    // does not create native pseudoclass styles
    // mixInherit - if true, mixes in the 'inherit' property, if false, 'inherit' will get undefined (same as inherit===false)
    function mixWithoutCreatingNativePseudoclasses(styleA, styleB, mixInherit) {
        // mix css properties and non-emulated pseudoclass properties
        var mainStylesMerged = utils.merge({}, styleA.basicProperties, styleB.basicProperties)
        var newStyle = Style(mainStylesMerged)

        // mix block and label properties
        newStyle.componentStyleMap = mergeComponentStyleMaps(styleA, styleB)

        // mix pseudoclass properties
        newStyle.pseudoclasses = mergePseudoclasses(styleA, styleB)

        // mix $state
        if(styleB.stateHandler !== undefined) {
            newStyle.stateHandler = styleB.stateHandler
        } else {
            newStyle.stateHandler = styleA.stateHandler
        }

        // mix $setup and $kill                                                                                                                                                                                                                                                                 waaahhh hah hah haaaaaaa
        if(styleB.setup !== undefined) {
            newStyle.setup = styleB.setup
        } else {
            newStyle.setup = styleA.setup
        }
        if(styleB.kill !== undefined) {
            newStyle.kill = styleB.kill
        } else {
            newStyle.kill = styleA.kill
        }

        if(mixInherit) {
            newStyle.inherit = styleA.inherit || styleB.inherit
        }

        newStyle.pureNative = isPureNative(newStyle)

        return newStyle
    }

    // returns a new component style map where styleB overrides styleA
    // handles the 'inherit' option on styles
    function mergeComponentStyleMaps(styleA, styleB) {
        var mergedStyleMap = utils.merge({}, styleA.componentStyleMap)
        for(var key in styleB.componentStyleMap) {
            var styleMapping = styleB.componentStyleMap[key] // a Style object

            mergedStyleMap[key] = conditionalMix(mergedStyleMap[key], styleMapping)
        }

        return mergedStyleMap
    }

    // conditionally mixes two styles
    // returns b mixed into a if b inherits
    // otherwise returns b
    function conditionalMix(a,b) {
        if(b === undefined)
            return a

        if(b.inherit) {
            if(a === undefined)
                return b
            else
                return a.mix(b, false)
        } else {
            return b
        }
    }

    // returns true if the style can be rendered with pure css (no javascript needed)
    function isPureNative(style) {
        if(style.setup === undefined && style.kill === undefined && style.stateHandler === undefined
        ) {
            var allPseudoclassesNative = true
            style.pseudoclasses.classes.forEach(function(style) {
                if(!style.pureNative) allPseudoclassesNative = false
            })
            if(!allPseudoclassesNative) {
                return false
            }

            var allPureNative = true
            for(var key in style.componentStyleMap) {
                if(style.componentStyleMap[key].pureNative !== true) {
                    allPureNative = false
                    break
                }
            }
            if(!allPureNative) {
                return false
            }

            return true
        }
    }

    // mixes together the pseudoclass properties of two styles
    // handles changing native pseudoclass handling to emulated (and vice versa)
    function mergePseudoclasses(styleA, styleB) {
        var merged = mergeStyleMaps(styleA.pseudoclasses.classes, styleB.pseudoclasses.classes)
        var emulatedInfo = utils.merge({}, styleA.pseudoclasses.emulatedInfo, styleB.pseudoclasses.emulatedInfo)

        return {classes: merged, emulatedInfo:emulatedInfo}


        // returns a new map with mapA and mapB merged, where mapB's styles override
        function mergeStyleMaps(styleMapA, styleMapB) {
            var result = utils.hashmapMerge(new HashMap, styleMapA)
            styleMapB.forEach(function(v, key) {
                if(result.has(key)) {
                    var resultValue = result.get(key).mix(styleMapB.get(key), true)
                } else {
                    var resultValue = styleMapB.get(key)
                }

                result.set(key, resultValue)
            })

            return result
        }
    }

    var singleColonForPseudoElements = false; // may be changed if its detected that the browser does this
    var doubleColonPseudoElRegex =      /(::)(before|after|first-line|first-letter|selection)/;
    var singleColonPseudoElRegex = /([^:])(:)(before|after|first-line|first-letter|selection)/;

    // creates a css selector with the passed properties
    function setCss(selector, properties) {
        var unCamelCasedProperties = {}
        for (key in properties) {
            unCamelCasedProperties[mapCamelCase(key)] = properties[key]
        }

        var rule = addRule(jss.defaultSheet, selector)
        setStyleProperties(rule, properties);



        function addRule(sheet, selector) {
	        var rules = sheet.cssRules || sheet.rules || [];
	        var index = rules.length;

            var pseudoElementRule = addPseudoElementRule(sheet, selector, rules, index);
            if (!pseudoElementRule) {
                addRuleToSheet(sheet, selector, index);
            }

	        return rules[index].style
	    }

        // Handles single colon syntax for older browsers and bugzilla.mozilla.org/show_bug.cgi?id=949651
        function addPseudoElementRule(sheet, selector, rules, index) {
            var doubleColonSelector;
            var singleColonSelector;

            if (doubleColonPseudoElRegex.exec(selector)) {
                doubleColonSelector = selector;
                singleColonSelector = toSingleColonPseudoElements(selector);
            } else if (singleColonPseudoElRegex.exec(selector)) {
                doubleColonSelector = toDoubleColonPseudoElements(selector);
                singleColonSelector = selector;
            } else {
                return false; // Not dealing with a pseudo element
            }

            if (!singleColonForPseudoElements) {
                // Assume modern browser and then check if successful
                try {
                    addRuleToSheet(sheet, doubleColonSelector, index);
                } catch(e) {
                    // if there's an error, assume its because the selector was deemed invalid (firefox), so try -moz- extension
                    addRuleToSheet(sheet, toMozDoubleColonPseudoElements(selector), index);
                }
                if (rules.length <= index) {
                    singleColonForPseudoElements = true;
                }
            }
            if (singleColonForPseudoElements) {
                addRuleToSheet(sheet, singleColonSelector, index);
            }

            return true;
        }

        function addRuleToSheet(sheet, selector, index) {
	        if (sheet.insertRule) {
	            sheet.insertRule(selector + ' { }', index);
	        } else {
	            sheet.addRule(selector, null, index);
	        }
	    }

        function setStyleProperties(ruleStyle, properties) {
	        for (var key in properties) {
                ruleStyle.setProperty(key, properties[key])
	        }
	    }

        function toDoubleColonPseudoElements(selector) {
            return selector.replace(singleColonPseudoElRegex, function (match, submatch1, submatch2, submatch3) {
                return submatch1 + '::' + submatch3;
            });
        }
        function toMozDoubleColonPseudoElements(selector) {
            return selector.replace(singleColonPseudoElRegex, function (match, submatch1, submatch2, submatch3) {
                return submatch1 + '::-moz-' + submatch3;
            });
        }
        function toSingleColonPseudoElements(selector) {
            return selector.replace(doubleColonPseudoElRegex, function(match, submatch1, submatch2) {
                return ':' + submatch2;
            })
        }
    }


    // creates the css styles necessary to render the native pseudoclass styles of this style (and contained styles that can be rendered native)
    // intended to be called only once per style
    // styleMap - A block's new computedStyleMap. Selectors that also exist in native pseudoclasses of the style have already been created or copied (so you can be sure creating css class styles for them won't conflict with anything)
    // jsRenderedPseudoclassIndex - the index of the active pseudoclass style - needed for deciding what native css needs to be overridden by `style`
        // if this is 0, no overriding needs to happen (so 0 is also set when there's no active js-rendered/emulated pseudoclass)
    function createNativePseudoclasses(gem, style, nativePseudoclassSelectorMap, jsRenderedPseudoclassIndex, defaultStyle) {
        if(nativePseudoclassSelectorMap === undefined) nativePseudoclassSelectorMap = {}

        var nativePseudoclassSelectors = []
        //var nativePseudoclassPropertiesToOverride = {}   // stores what style properties for what pseudoclasses needs to be overridden by an emulated style
        var newNativePseudoclassMap = {} // a mapping from a Gem name to a nativePseudoclassSelectorMap
        var index = 0
        style.pseudoclasses.classes.forEach(function(pseudoclassStyle, pseudoclassKey) {
            var fullSelector = '.'+style.className+':'+pseudoclassKey.join(':')
            if(pseudoclassStyle.pureNative) {
                // create css styles for top-level css properties of the native psuedoclass
                createPseudoClassRules(fullSelector, pseudoclassStyle.basicProperties, style, false)
                nativePseudoclassSelectors.push(pseudoclassKey.join(':'))

                for(var blockSelector in pseudoclassStyle.componentStyleMap) {
                    addNativePseudoclassMapItem(blockSelector, fullSelector, pseudoclassStyle.componentStyleMap[blockSelector])
                }
            } else if(index === jsRenderedPseudoclassIndex) {
                // create overriding css styles for top-level css properties of the emulated psuedoclass (so that emulated and native pseudoclasses mix properly)
                for(var n=0; n<nativePseudoclassSelectors.length; n++) {
                    var selector = nativePseudoclassSelectors[n]
                    createPseudoClassRules(fullSelector+":"+selector, style.basicProperties, style, true)
                }
            }

            index++
        })

        var blockStyleUtils = require("./blockStyleUtils")
        for(var selector in nativePseudoclassSelectorMap) {
            var pseudoclassStyle = nativePseudoclassSelectorMap[selector]
            if(pseudoclassStyle.inherit) {
                pseudoclassStyle = blockStyleUtils.getInheritingStyle(gem).mix(pseudoclassStyle, false)
            }

            var fullSelector = selector+' '+'.'+style.className

            // create css styles for the top-level style when inside a pure native pseudoclass style of its parent
            createPseudoClassRules(fullSelector, pseudoclassStyle.basicProperties, style, true)

            for(var blockSelector in pseudoclassStyle.componentStyleMap) {
                addNativePseudoclassMapItem(blockSelector, fullSelector, pseudoclassStyle.componentStyleMap[blockSelector])
            }

            // create css styles for pseudoclass styles when inside a pure native pseudoclass style of its parent
            pseudoclassStyle.pseudoclasses.classes.forEach(function(pseudoclassStyle, pseudoclassKey) {
                if(pseudoclassStyle.pureNative) {
                    createPseudoClassRules(fullSelector+':'+pseudoclassKey.join(':'), pseudoclassStyle.basicProperties, style, true)
                }
            })
        }

        return newNativePseudoclassMap


        function addNativePseudoclassMapItem(blockSelector, cssSelector, styleValue) {
            if(newNativePseudoclassMap[blockSelector] === undefined)
                newNativePseudoclassMap[blockSelector] = {}
            newNativePseudoclassMap[blockSelector][cssSelector] = styleValue
        }

        // cssProperties - The css rules to apply (should only contain native css properties). CamelCase and certain integer values will be converted.
        // overwriteBloodyStyles - if true, styles from styleMapStyle are overridden with the default (either a block's default or the base default)
        function createPseudoClassRules(selector, cssProperties,  /*temporary*/ styleMapStyle, overwriteBloodyStyles) {
            if(!style.nativePseudoclassesWritten[selector]) {
                var pseudoClassCss = {}

                if(overwriteBloodyStyles) {
                    // overwrite styles that would bleed over from the styleMapStyle

                    var propertiesToOverride = Object.keys(styleMapStyle.basicProperties)
                    styleMapStyle.pseudoclasses.classes.forEach(function(style) {
                        propertiesToOverride = propertiesToOverride.concat(Object.keys(style.basicProperties))
                    })

                    for(var n=0; n<propertiesToOverride.length; n++) {
                        var key = propertiesToOverride[n]
                        if(defaultStyle) {
                            var defaultStyleProperty = defaultStyle.basicProperties[key]
                        }

                        var initialStyle = defaultStyleProperty || defaultStyleValues[key]
                                           || (key in stylesThatInheritByDefault ? 'inherit' : 'initial') // todo: write a function to calculate the inital value, since 'initial' isn't supported in IE (of course) - tho it will be eventually since its becoming apart of css3
                        pseudoClassCss[key] = initialStyle
                    }
                }

                for(var key in cssProperties) {
                    var value = cssProperties[key]

                    var cssStyle = key
                    var cssStyleName = mapCamelCase(cssStyle)
                    pseudoClassCss[cssStyleName] = cssValue(cssStyleName, value)
                }

                // create immediate pseudo class style
                setCss(selector, pseudoClassCss) // create the css class with the pseudoClass
                if(this.nativePseudoclassStyles !== undefined) {
                    styleMapStyle.nativePseudoclassStyles[selector] = pseudoClassCss
                }

                style.nativePseudoclassesWritten[selector] = true
            }
        }
    }
})


// private


// a map of pseudoclass names and how they are emulated with javascript
// each pseudoclass sets up the following functions:
    // check - a function that checks if that pseudoclass currently applies to the component when its called
    // setup - calls a callback when the pseudoClass starts and stops applying
        // should return an object that will be passed to the kill function (as its 'state' parameter)
    // kill - cleans up anything set up in the 'setup' function
    // processParameter - takes the pseudoclass parameter and returns some object representing it that will be used by the setup and check functions
var jsRenderedPseduoclasses = {
    hover: {
        emulated: true,
        check: function(component) {
            var nodes = document.querySelectorAll( ":hover" )
            for(var n=0; n<nodes.length; n++) {
                if(nodes[n] === component.domNode) {
                    return true
                }
            }
            return false
        },
        setup: function(component, startCallback, endCallback) {
            component.on("mouseover", function() {
                startCallback()
            })
            component.on("mouseout", endCallback)

            return {start: startCallback, end: endCallback}
        },
        kill: function(component, state) {
            component.off("mouseover", state.start)
            component.off("mouseout", state.end)
        }
    },
    checked: {
        emulated: true,
        check: function(component) {
            if(component.domNode.nodeName !== 'INPUT' && component.domNode.nodeName !== 'OPTION') {
                console.warn("The pseudoclass 'checked' can only apply to 'input' nodes (Button, CheckBox, RadioButton, or TextField) or 'option' nodes (Option)")
                return false
            }
            return component.selected
        },
        setup: function(component, startCallback, endCallback) {
            var setupState = {}
            component.on("change", setupState.listener = function() {
                if(component.selected) {
                    startCallback()
                } else {
                    endCallback()
                }
            })

            return setupState
        },
        kill: function(component, state) {
            component.removeListener("change", state.listener)
        }
    },
    required: {
        emulated: true,
        check: function(component) {
            if(component.domNode.nodeName !== 'INPUT') {
                console.warn("The pseudoclass 'required' can only apply to 'input' nodes (Button, CheckBox, RadioButton, or TextField)")
                return false
            }
            return component.attr('required') !== undefined
        },
        setup: function(component, startCallback, endCallback) {
            var observer = new MutationObserver(function() {
                if(component.attr('required') !== undefined) {
                    startCallback()
                } else {
                    endCallback()
                }
            })

            observer.observe(component.domNode, {attributes: true})

            return {observer: observer}
        },
        kill: function(component, state) {
            state.observer.disconnect()
        }
    },
    'last-child': {
        emulated: true,
        check: function(component) {
            return nthLastChildCheck(component, '1')
        },
        setup: function(component, startCallback, endCallback) {
            var observer = new MutationObserver(function() {
                if(nthLastChildCheck(component, '1')) {
                    startCallback()
                } else {
                    endCallback()
                }
            })

            var setupObserver = function() {
                // note that since this uses the component parent rather than domNode.parentNode, this won't work for components added to non-component nodes (and there's no good way to do it, because you would have to poll for parent changes)
                observer.observe(component.parent.domNode, {childList: true})
            }

            if(component.parent !== undefined) {
                setupObserver()
            }

            component.on('newParent', function() {
                setupObserver()
            })
            component.on('parentRemoved', function() {
                observer.disconnect()
            })

            return {observer: observer}
        },
        kill: function(component, state) {
            state.observer.disconnect()
        }
    },
    'nth-child': {
        emulated: true,
        parameterTransform: function(parameter) {
            var parts = parseNthChildParameter(parameter)
            if(parts.variable === 0) {
                return parts.constant+''
            } else if(parts.constant === 0) {
                return parts.variable+'n'
            } else {
                return parts.variable+'n+'+parts.constant
            }
        },

        check: function(component, parameterCheck) {
            return nthChildCheck(component, parameterCheck)
        },
        setup: function(component, startCallback, endCallback, parameterCheck) {

            var checkAndCallCallbacks = function() {
                if(nthChildCheck(component, parameterCheck)) {
                    startCallback()
                } else {
                    endCallback()
                }
            }

            var observer = new MutationObserver(function() {
                checkAndCallCallbacks()
            })

            var setupObserver = function() {
                // note that since this uses the component parent rather than domNode.parentNode, this won't work for components added to non-component nodes (and there's no good way to do it, because you would have to poll for parent changes)
                observer.observe(component.parent.domNode, {childList: true})
            }

            if(component.parent !== undefined) {
                setupObserver()
            }

            component.on('newParent', function() {
                setupObserver()
                checkAndCallCallbacks()
            })
            component.on('parentRemoved', function() {
                observer.disconnect()
                checkAndCallCallbacks()
            })

            return {observer: observer}
        },
        kill: function(component, state) {
            state.observer.disconnect()
        },

        // returns a function that takes an index and tell you if that index applies to the nthChildParameter
        processParameter: function(parameter) {
            var parts = parseNthChildParameter(parameter)
            if(parts.variable === 0) {
                return function(index) {
                    return index+1 === parts.constant
                }
            } else {
                return function(index) {
                    return ((index+1-parts.constant)/parts.variable) % 1 === 0
                }
            }
        }
    },

    // not's parameter is a statement consisting of pseudoclasses separated either by : or ,
    // $$not(pseudoclass1&pseudoclass2,psuedoclass3) translates to the css :not(:pseudoclass1:pseudoclass2,:psuedoclass3)
    not: {
        emulated: true,
        parameterTransform: function(parameter) {
            var orParts = parameter.split(',')
            return orParts.map(function(part) {
                var andParts = part.split(':')
                return andParts.map(function(part) {
                    var parts = getPseudoClassParts(part)
                    var mappedName = mapCamelCase(parts.class)
                    if(parts.parameter !== undefined) {
                        return mappedName+'('+parts.parameter+')'
                    } else {
                        return mappedName
                    }
                }).join(':')
            }).join(',')
        },

        check: function(component, parameterCheck) {
            throw new Error("The 'not' psuedoclass can only be used in Style objects that can be rendered in native css as of yet")
        },
        setup: function(component, startCallback, endCallback, parameterCheck) {
            throw new Error("The 'not' psuedoclass can only be used in Style objects that can be rendered in native css as of yet")
        },
        kill: function(component, state) {
            throw new Error("The 'not' psuedoclass can only be used in Style objects that can be rendered in native css as of yet")
        },

        // returns a function that takes an index and tell you if that index applies to the nthChildParameter
        processParameter: function(parameter) {
            throw new Error("The 'not' psuedoclass can only be used in Style objects that can be rendered in native css as of yet")
        }
    }
}

// name is the name of the new pseudoclass
// options is an object with the members:
    // check(component) - returns true if the pseudoclass applies to the component
    // setup(component, startCallback, endCallback, parameter) - a function that should call startCallback when the pseudoclass starts applying, and endCallback when it stops applying
        // parameter - the parameter passed to the pseudoclass (e.g. in :not(:first-child), ":first-child" is the parameter)
    // kill - a function that cleans up any event listeners or anything else set up in the 'setup' function
    // processParameter - a function that processes the pseudoclass parameter and returns some object the 'setup' function will get as its 4th argument
        // if this is undefined, the pseudoclass will throw an exception for styles that have a parameter for it
    // emulated - if true, it means that there is a corresponding native pseudoclass that can be used if the style can be rendered with pure css
module.exports.addPseudoClass = function(name, options) {
    var mappedName = mapCamelCase(name)
    if(jsRenderedPseduoclasses[mappedName] !== undefined) {
        var nameForError = '"'+mappedName+'"'
        if(mappedName !== name) {
            nameForError+= " (mapped from '"+name+"')"
        }
        throw new Error("The pseudoclass "+nameForError+" is already defined.")
    }
    // else
    jsRenderedPseduoclasses[mappedName] = options
}


function nthChildCheck(component, testFn) {
    if(component.domNode.parentNode === null)
        return false

    var children = component.domNode.parentNode.children                    // must be domNode.parentNode, because child nodes may not be Components
    var index = Array.prototype.indexOf.call(children, component.domNode)
    return testFn(index)
}

function nthLastChildCheck(component, parameter) {
    if(component.domNode.parentNode === null)
        return false

    var children = component.domNode.parentNode.children                    // must be domNode.parentNode, because child nodes may not be Components
    var index = children.length - parseInt(parameter)
    return children[index] === component.domNode
}

var nthChildParameter = new RegExp(
    '^' // begin
        +'('
            +'('
                +'(-?\\d*)'        // constant
                +'(([+-]\\d*)n?)?' // first-order term
            +')|'
            +'('
                +'(-?\\d)*(n)?' // first-order term first
                +'([+-]\\d*)?' // then constant
            +')'
        +')'
    +'$' // the EYND
)

// returns the variable and constnat parts of the parameter
function parseNthChildParameter(parameter) {
    var parts = parameter.replace(/\s/g, '').match(nthChildParameter)
    if(parts === null)
        throw new Error("nth-child parameter '"+parameter+"' isn't valid")

    if(parts[2] !== undefined) {
        var constant = parts[3]
        var variable = parts[5]
    } else {
        var constant = parts[9]
        var variable = parts[7]
        if(variable === undefined && parts[8] === 'n')
            variable = 1
    }

    if(constant === undefined) constant = 0
    else                       constant = parseInt(constant)
    if(variable === undefined) variable = 0
    else if(variable === '+')  variable = 1
    else if(variable === '-')  variable = -1
    else                       variable = parseInt(variable)

    return {variable: variable, constant: constant}
}


// maps a style value to a css value
// style values that are numbers are mapped to strings, usually with px postfix
function cssValue(cssStyleName, value) {
    // If a number was passed in, add 'px' to the (except for certain CSS properties) [also taken from jquery's code]
    if(typeof(value) === "number" && cssNumber[cssStyleName] === undefined) {
        return value+"px"
    } else {
        return value.toString()
    }
}

var pseudoClassRegex = new RegExp( // /^([^(]*)(\((.*)\))?$/
    "([^(]*)"        // anything that's not an open paren
    +"(\\((.*)\\))?" // optionally some arbitrary string inside parens
    +"$"             // THE EYND!
)

// pulls apart the pseudoclass name from its (optional) parameter
// e.g. pulls out 'nth-child' and '2+3n' from 'nth-child(2+3n)'
function getPseudoClassParts(fullPsuedoClass) {
    var x = fullPsuedoClass.match(pseudoClassRegex)
    if(x === null) throw new Error("Pseudoclass '"+fullPsuedoClass+"' is invalid")
    return {class: x[1], parameter: x[3]}
}


// taken from jquery's code
var cssNumber = {
    "column-count": 1,
    "fill-opacity": 1,
    "flex-grow": 1,
    "flex-shrink": 1,
    "font-weight": 1,
    "line-height": 1,
    "opacity": 1,
    "order": 1,
    "orphans": 1,
    "widows": 1,
    "z-index": 1,
    "zoom": 1
}

function isStyleObject(o) {
    return o !== undefined && o.componentStyleMap !== undefined
}


//var asciiA = 'A'.charCodeAt(0), asciiZ = 'Z'.charCodeAt(0), difference = 'a'.charCodeAt(0) - asciiA
function mapCamelCase(cssStyleName) {
    return cssStyleName.replace(/([A-Z])/g, function(match, submatch) {          // this is from jss
        return '-' + submatch.toLowerCase();
    })

    /*for(var n=0; n<cssStyleName.length; n++) {
        var ascii = cssStyleName.charCodeAt(n)
        if(asciiA <= ascii && ascii <= asciiZ) { // found capital letter
            cssStyleName = cssStyleName.slice(0, n) + '-'+String.fromCharCode(ascii+difference) + cssStyleName.slice(n+1)
            n++ // increment a second time for the dash
        }
    }

    return cssStyleName*/
}

// maps all the styles that are inherited by descendant nodes to their default values
// source: http://stackoverflow.com/questions/5612302/which-css-styles-are-inherited
var defaultStyleValues = {
    'azimuth': 'center',
    'border-collapse': 'separate',
    'border-spacing': '0',
    'box-sizing': 'border-box',
    'caption-side': 'top',
    //'color': 'black',         // let this inherit
    //'cursor': 'auto',         // let this one inherit - its weird otherwise
    'direction': 'ltr',
     display: 'inline-block', // changes the default display to inline-block
    'elevation': '',
    'empty-cells': 'show',
    // 'font-family': '',       // let this inherit
    // 'font-size': 'medium',   // let this inherit
    //'font-style': 'normal',   // let this inherit
    //'font-variant': 'normal', // let this inherit
    //'font-weight': 'normal',  // let this inherit
    'letter-spacing': 'normal',
    'line-height': 'normal',
    'list-style-image': 'none',
    'list-style-position': 'outside',
    'list-style-type': 'disc',
    'orphans': '2',
    'pitch-range': '',
    'pitch': '',
     position: 'relative', // changes the default positioning so that absolute is relative to its parent by default
    'quotes': '',
    'richness': '',
    'speak-header': '',
    'speak-numeral': '',
    'speak-punctuation': '',
    'speak': '',
    'speak-rate': '',
    'stress': '',
    'text-align': 'left',
    'text-indent': '0',
    'text-transform': 'none',
    //'visibility': 'visible',    // let this inherit - otherwise you just hide the container and not the contents
    'voice-family': '',
    'volume': '',
    'white-space': 'normal',
    'widows': '2',
    'word-spacing': 'normal'
}

var stylesThatInheritByDefault = {
    'font-family':1, 'font-size':1, 'font-style':1, 'font-variant':1, 'font-weight':1, 'visibility':1, 'color':1, 'cursor':1
}




// returns index of the passed css classname, or undefined if sheet containing that class isn't found
function cssClassSheetIndex(classname) {
    var result = undefined

    var styleNodes = document.querySelectorAll("style")
    for(var n=0; n<styleNodes.length; n++) {
        var sheet = styleNodes[n].sheet
        jssModule.defaultSheet = sheet

        var defaultStyleMaybe = jssModule.get(classname)
        if(Object.keys(defaultStyleMaybe).length > 0) {
            result = n
            break
        }
    }

    jssModule.defaultSheet = undefined
    return result
}


var defaultJss = jssModule.forDocument(document) // must be created before the jss object (so that the styles there override the styles in the default sheet)
var jss = jssModule.forDocument(document)

var defaultClassSheetIndex = cssClassSheetIndex('.'+Style.defaultClassName)
if(defaultClassSheetIndex === undefined) {
    defaultJss.defaultSheet = defaultJss._createSheet() // create its sheet first (before the regular jss sheet)

    jss.defaultSheet = jss._createSheet()
} else {
    // if the default styleclass *already* exists, it probably means that blocks.js is being loaded twice
    console.log("Warning: the default-styles class name for blocks.js looks like its already in use. This probably means you have two versions of blocks.js loaded. If so, Gem.js will continue to work, but your app will be a bit bloated. If something other than block.js created that class, blocks.js may break that style.")

    var styleNodes = document.querySelectorAll("style")
    defaultJss.defaultSheet = styleNodes[defaultClassSheetIndex].sheet
    jss.defaultSheet = styleNodes[defaultClassSheetIndex+1].sheet

    // make sure the baseClassName isn't already taken
    var dedupNumber = 0
    while(true) {
        var testBaseClassName = baseClassName+dedupNumber
        if(cssClassSheetIndex('.'+testBaseClassName+dedupNumber+0) !== undefined) {
            dedupNumber++
        } else {
            break;
        }
    }

    baseClassName = testBaseClassName+dedupNumber
}

defaultJss.set('.'+Style.defaultClassName, defaultStyleValues) // creates default css class in order to prevent inheritance

defaultJss.set('input', { // chrome and firefox user agent stylesheets mess with this otherwise
    cursor: 'inherit'
})
defaultJss.set('img', { // images should retain content-box sizing, since pixel perfect width on images is important so you avoid resizing the image
    'box-sizing': 'content-box'
})


/*private*/
module.exports.isDev; // should be set by Gem

// externalized for testing
module.exports.jsRenderedPseduoclasses = jsRenderedPseduoclasses
module.exports.parseNthChildParameter = parseNthChildParameter