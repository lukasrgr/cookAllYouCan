var Gem = require('../Gem')
var proto = require('proto')

var domUtils = require("../domUtils")

module.exports = proto(Gem, function(superclass) {

	// static properties

    this.name = 'TextField'

	this.init = function(/*[label,] password*/) {
        if(arguments.length === 1) {
            if(typeof(arguments[0]) === 'string')
                var label = arguments[0]
            else
                var password = arguments[0]
        } else if(arguments.length > 1) {
            var label = arguments[0]
            var password = arguments[1]
        }

        this.domNode = document.createElement("input") // do this before calling the superclass constructor so that an extra useless domNode isn't created inside it

		this.label = label
		//domUtils.setAttribute(this.domNode,'type','text');  // NOTE: IE fucks this up, and since 'text' is the default type for an input node, lets just forget abat it
        if(password)
		    this.attr('type','password')

        superclass.init.apply(this, arguments) // superclass constructor      
           
        domUtils.setupBoundProperty(this,this.quiet,'val', {
            getFn: getVal, 
            setFn: function(x) {
                setVal.bind(this)(x, true)   
            }
        })
	}


	// instance properties

    Object.defineProperty(this, 'val', {       
        get: getVal, set: setVal
    })
    
    
    // returns the value of the field
    function getVal() {
        return this.domNode.value
    }
    // sets the value of the field
    function setVal(value, quiet) {
        if(this.val === value) return; // do nothing if there's no change

        this.domNode.value = value
        if(!quiet) this.emit('change')
    }

});
