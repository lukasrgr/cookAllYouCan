var Gem = require('Gem')
var proto = require('proto')
var domUtils = require("domUtils")

module.exports = proto(Gem, function(superclass) {
	// static variables
    this.name = 'CheckBox'

	// instance methods
	this.init = function(label) {
        this.domNode = document.createElement("input") // do this before calling the superclass constructor so that an extra useless domNode isn't created inside it
        this.label = label
		this.attr('type','checkbox')
        
        superclass.init.apply(this, arguments) // superclass constructor
        
        domUtils.setupBoundProperty(this,this.quiet,'selected', {
            getFn: getSelected, 
            setFn: function(x) {
                setSelected.bind(this)(x, true)   
            }
        })
	}

    Object.defineProperty(this, 'selected', {
        get: getSelected,set: setSelected
    })    
})

// returns whether or not the checkbox is checked
function getSelected() {
    return this.domNode.checked   
}

// sets the value of the checkbox to the passed value (true for checked)
function setSelected(checked, quiet) {
    var newValue = checked === true
    var curValue = this.domNode.checked
    if(curValue === newValue) return;  // do nothing if nothing's changing

    this.domNode.checked = newValue
    if(!quiet) this.emit('change') // the browser has no listenable event that is triggered on change of the 'checked' property
}
